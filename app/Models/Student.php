<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Str;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Student extends Model implements HasMedia
{
    use InteractsWithMedia, HasFactory;

    protected $fillable = [
        'slug',
        'serial_number',
        'registration_number',
        'user_id',
        'school_year_id',
        'educational_institution_id',
        'registration_category_id',
        'registration_path_id',
        'major_id',
        'nisn',
        'class_level_id',
        'whatsapp_number',
        'registration_validation',
        'registration_status'
    ];

    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (Student $student) {
            $student->slug = Str::uuid()->toString();
            $student->serial_number = self::where([
                'school_year_id' => $student->school_year_id,
                'educational_institution_id' => $student->educational_institution_id
            ])->max('serial_number') + 1;
            $student->registration_number = optional(optional($student->educationalInstitution)->educationalLevel)->code . str_replace('20', '', optional($student->schoolYear)->first_year . optional($student->schoolYear)->last_year) . Str::padLeft($student->serial_number, 4, '0');
        });

        static::created(function (Student $student) {
            $totalStudents = self::where([
                'educational_institution_id' => $student->educational_institution_id,
                'school_year_id' => $student->school_year_id
            ])
                ->count();

            $registrationSchedule = RegistrationSchedule::where([
                'educational_institution_id' => $student->educational_institution_id,
                'school_year_id' => $student->school_year_id
            ])
                ->first();

            if ($registrationSchedule) {
                $registrationSchedule->remaining_quota = $registrationSchedule->quota - $totalStudents;
                $registrationSchedule->save();
            }
        });
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function schoolYear(): BelongsTo
    {
        return $this->belongsTo(SchoolYear::class);
    }

    public function educationalInstitution(): BelongsTo
    {
        return $this->belongsTo(EducationalInstitution::class);
    }

    public function registrationCategory(): BelongsTo
    {
        return $this->belongsTo(RegistrationCategory::class);
    }

    public function classLevel(): BelongsTo
    {
        return $this->belongsTo(ClassLevel::class);
    }

    public function major(): BelongsTo
    {
        return $this->belongsTo(Major::class);
    }

    public function registrationPath(): BelongsTo
    {
        return $this->belongsTo(RegistrationPath::class);
    }

    public function scopeStatsFilter(Builder $query, $request): Builder
    {
        $educationalInstitutionId = $request['educational_institution_id'];
        $registrationCategoryId = $request['registration_category_id'];
        $registrationPathId = $request['registration_path_id'];
        $registrationStatus = $request['registration_status'];

        $query->where('school_year_id', $request['school_year_id']);
        $query->when($educationalInstitutionId, fn($query) => $query->where('educational_institution_id', $educationalInstitutionId));
        $query->when($registrationCategoryId, fn($query) => $query->where('registration_category_id', $registrationCategoryId));
        $query->when($registrationPathId, fn($query) => $query->where('registration_path_id', $registrationPathId));
        $query->when($registrationStatus, fn($query) => $query->where('registration_status', $registrationStatus));

        return $query;
    }

    public function scopeRegistrationValidation(Builder $query, $registrationValidation): Builder
    {
        return $query->where('registration_validation', $registrationValidation);
    }

    public function scopeRegistrationStatus(Builder $query, $registrationStatus): Builder
    {
        return $query->where('registration_status', $registrationStatus);
    }
}
