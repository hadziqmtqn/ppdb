<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Support\Str;

class RegistrationFee extends Model
{
    protected $fillable = [
        'slug',
        'educational_institution_id',
        'school_year_id',
        'type_of_payment',
        'registration_status',
        'name',
        'amount',
        'is_active',
    ];

    protected function casts(): array
    {
        return [
            'slug' => 'string',
            'is_active' => 'boolean',
        ];
    }

    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (RegistrationFee $registrationFee) {
            $registrationFee->slug = Str::uuid()->toString();
        });
    }

    public function educationalInstitution(): BelongsTo
    {
        return $this->belongsTo(EducationalInstitution::class);
    }

    public function schoolYear(): BelongsTo
    {
        return $this->belongsTo(SchoolYear::class);
    }

    public function paymentTransaction(): HasOne
    {
        return $this->hasOne(PaymentTransaction::class, 'registration_fee_id');
    }

    // TODO Scope
    public function scopeFilterByEducationalInstitution(Builder $query): Builder
    {
        $auth = auth()->user();

        return $query->when(!$auth->hasRole('super-admin'), fn($query) => $query->where('educational_institution_id'), optional(optional($auth)->admin)->educational_institution_id);
    }

    public function scopeEducationalInstitutionId(Builder $query, $eductionalInstitutionId): Builder
    {
        return $query->where('educational_institution_id', $eductionalInstitutionId);
    }

    public function scopeSchoolYearId(Builder $query, $schoolYearId): Builder
    {
        return $query->where('school_year_id', $schoolYearId);
    }

    public function scopeActive(Builder $query): Builder
    {
        return $query->where('is_active', true);
    }
}
