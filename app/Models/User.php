<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Database\Factories\UserFactory;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Spatie\Permission\Traits\HasRoles;
use Spatie\Sluggable\HasSlug;
use Spatie\Sluggable\SlugOptions;

class User extends Authenticatable implements HasMedia
{
    /** @use HasFactory<UserFactory> */
    use HasFactory, Notifiable, HasRoles, SoftDeletes, HasSlug, InteractsWithMedia;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'is_active',
        'oauth_id',
        'oauth_type',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
            'deleted_at' => 'datetime',
            'is_active' => 'boolean',
        ];
    }

    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (User $user) {
            $user->name = strtoupper($user->name);
        });

        static::updating(function (User $user) {
            $user->name = strtoupper($user->name);
        });
    }

    public function getSlugOptions(): SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('name')
            ->saveSlugsTo('username');
    }

    public function admin(): HasOne
    {
        return $this->hasOne(Admin::class, 'user_id');
    }

    public function scopeFilterByUsername(Builder $query, $username): Builder
    {
        return $query->where('username', $username);
    }

    public function scopeActive(Builder $query): Builder
    {
        return $query->where('is_active', true);
    }

    public function scopeSearch(Builder $query, $search): Builder
    {
        return $query->when($search['search'], function ($query) use ($search) {
            $query->whereAny(['name', 'email'], 'like', '%' . $search['search'] . '%');
        });
    }

    public function student(): HasOne
    {
        return $this->hasOne(Student::class, 'user_id');
    }

    public function personalData(): HasOne
    {
        return $this->hasOne(PersonalData::class, 'user_id');
    }

    public function family(): HasOne
    {
        return $this->hasOne(Family::class, 'user_id');
    }

    public function residence(): HasOne
    {
        return $this->hasOne(Residence::class, 'user_id');
    }

    public function previousSchool(): HasOne
    {
        return $this->hasOne(PreviousSchool::class, 'user_id');
    }

    public function scopeFilterStudentDatatable(Builder $query, $request): Builder
    {
        $auth = auth()->user();
        $role = $auth->roles->first()->name;

        $schoolYearId = $request['school_year_id'];
        $status = $request['status'];

        $query->when(($role == 'admin'),
            // Admin: Filter berdasarkan educational institution
            fn($query) => $query->whereHas('student', fn($query) => $query->where('educational_institution_id', optional($auth->admin)->educational_institution_id)),
            // Bukan admin: Cek apakah user atau super-admin
            fn($query) => $query->when(($role == 'user'),
                // User: Filter berdasarkan ID user
                fn($query) => $query->where('id', $auth->id),
                // Super-admin: Semua student
                fn($query) => $query->whereHas('student')
            )
        );

        $query->whereHas('student', function ($query) use ($schoolYearId) {
            $query->where('school_year_id', $schoolYearId);
        });

        $query->when($status, function ($query) use ($status) {
            $query->when($status == 'active', function ($query) use ($status) {
                $query->where('is_active', true);
            })
                ->when($status == 'inactive', function ($query) use ($status) {
                    $query->where('is_active', false);
                })
                ->when($status == 'deleted', function ($query) {
                    $query->onlyTrashed();
                });
        });

        return $query;
    }
}
